from __future__ import annotations

import logging
import re
import sys

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from utils.ui import show_admin_menu


def _get_main_attr(name: str):
    module = sys.modules.get("__main__")
    if module is None:
        raise AttributeError(f"__main__ module not found while accessing {name}")
    if not hasattr(module, name):
        raise AttributeError(f"{name} is not available on __main__")
    return getattr(module, name)

router = Router(name="clients")
logger = logging.getLogger(__name__)
_CLIENTS_DIAG = False
log_clients = logging.getLogger("clients_diag")
logging.getLogger("diag").warning("ROUTER LOADED: %s", __name__)

has_permission = _get_main_attr("has_permission")
normalize_phone_for_db = _get_main_attr("normalize_phone_for_db")
only_digits = _get_main_attr("only_digits")
parse_birthday_str = _get_main_attr("parse_birthday_str")
_find_client_by_phone = _get_main_attr("_find_client_by_phone")
_pool = _get_main_attr("pool")


@router.message(Command("clients_diag_on"))
async def clients_diag_on(msg: Message, state: FSMContext):
    if not await has_permission(msg.from_user.id, "view_orders_reports"):
        return await msg.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    global _CLIENTS_DIAG
    _CLIENTS_DIAG = True
    await msg.answer("üü¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ¬´–ö–ª–∏–µ–Ω—Ç—ã¬ª: –í–ö–õ.")


@router.message(Command("clients_diag_off"))
async def clients_diag_off(msg: Message, state: FSMContext):
    if not await has_permission(msg.from_user.id, "view_orders_reports"):
        return await msg.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    global _CLIENTS_DIAG
    _CLIENTS_DIAG = False
    await msg.answer("‚ö´Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ¬´–ö–ª–∏–µ–Ω—Ç—ã¬ª: –í–´–ö–õ.")


class AdminClientsFSM(StatesGroup):
    root = State()
    find_wait_phone = State()
    edit_wait_phone = State()
    edit_pick_field = State()
    edit_wait_value = State()


def admin_clients_kb() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="–ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, one_time_keyboard=True)


def client_edit_fields_kb() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="–ò–º—è"), KeyboardButton(text="–¢–µ–ª–µ—Ñ–æ–Ω")],
        [KeyboardButton(text="–î–†"), KeyboardButton(text="–ë–æ–Ω—É—Å—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")],
        [KeyboardButton(text="–ë–æ–Ω—É—Å—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–±–∞–≤–∏—Ç—å")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, one_time_keyboard=True)


def _fmt_client_row(rec) -> str:
    bday = rec["birthday"].strftime("%Y-%m-%d") if rec["birthday"] else "‚Äî"
    return "\n".join([
        f"id: {rec['id']}",
        f"–ò–º—è: {rec['full_name'] or '‚Äî'}",
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {rec['phone'] or '‚Äî'}",
        f"–î–†: {bday}",
        f"–ë–æ–Ω—É—Å—ã: {rec['bonus_balance']}",
        f"–°—Ç–∞—Ç—É—Å: {rec['status']}",
    ])


@router.message(AdminClientsFSM.root, F.text == "–ö–ª–∏–µ–Ω—Ç—ã")
async def admin_clients_root(msg: Message, state: FSMContext):
    await msg.answer("–ö–ª–∏–µ–Ω—Ç—ã: –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=admin_clients_kb())


@router.message(AdminClientsFSM.root, F.text == "–ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞")
async def client_find_start(msg: Message, state: FSMContext):
    await state.set_state(AdminClientsFSM.find_wait_phone)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ (8/ +7/ 9...):")

@router.message(AdminClientsFSM.root, F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
async def client_edit_start(msg: Message, state: FSMContext):
    await state.set_state(AdminClientsFSM.edit_wait_phone)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")

@router.message(AdminClientsFSM.root, F.text == "–ù–∞–∑–∞–¥")
async def admin_clients_back(msg: Message, state: FSMContext):
    await show_admin_menu(msg, state)

@router.message(AdminClientsFSM.root, F.text == "–û—Ç–º–µ–Ω–∞")
async def admin_clients_cancel(msg: Message, state: FSMContext):
    await show_admin_menu(msg, state)


@router.message(
    StateFilter(
        AdminClientsFSM.find_wait_phone,
        AdminClientsFSM.edit_wait_phone,
        AdminClientsFSM.edit_pick_field,
        AdminClientsFSM.edit_wait_value,
    ),
    F.text == "–ù–∞–∑–∞–¥",
)
async def admin_clients_states_back(msg: Message, state: FSMContext):
    await state.clear()
    await state.set_state(AdminClientsFSM.root)
    await msg.answer("–ö–ª–∏–µ–Ω—Ç—ã: –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=admin_clients_kb())


@router.message(
    StateFilter(
        AdminClientsFSM.find_wait_phone,
        AdminClientsFSM.edit_wait_phone,
        AdminClientsFSM.edit_pick_field,
        AdminClientsFSM.edit_wait_value,
    ),
    F.text == "–û—Ç–º–µ–Ω–∞",
)
async def admin_clients_states_cancel(msg: Message, state: FSMContext):
    await state.clear()
    await show_admin_menu(msg, state)


@router.message(AdminClientsFSM.find_wait_phone, F.text)
async def client_find_got_phone(msg: Message, state: FSMContext):
    async with _pool.acquire() as conn:
        rec = await _find_client_by_phone(conn, msg.text)
    if not rec:
        await state.clear()
        await show_admin_menu(msg, state, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await state.clear()
    await show_admin_menu(msg, state, _fmt_client_row(rec))


@router.message(AdminClientsFSM.edit_wait_phone, F.text)
async def client_edit_got_phone(msg: Message, state: FSMContext):
    async with _pool.acquire() as conn:
        rec = await _find_client_by_phone(conn, msg.text)
    if not rec:
        await state.clear()
        await show_admin_menu(msg, state, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await state.update_data(client_id=rec["id"])
    await state.set_state(AdminClientsFSM.edit_pick_field)
    await msg.answer("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=client_edit_fields_kb())


@router.message(
    AdminClientsFSM.edit_pick_field,
    F.text.in_({"–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–î–†", "–ë–æ–Ω—É—Å—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "–ë–æ–Ω—É—Å—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–±–∞–≤–∏—Ç—å"}),
)
async def client_edit_pick_field(msg: Message, state: FSMContext):
    await state.update_data(edit_field=msg.text)
    prompt = {
        "–ò–º—è": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
        "–¢–µ–ª–µ—Ñ–æ–Ω": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (+7 / 8 / 9...):",
        "–î–†": "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (DD.MM.YYYY –∏–ª–∏ YYYY-MM-DD):",
        "–ë–æ–Ω—É—Å—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
        "–ë–æ–Ω—É—Å—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–±–∞–≤–∏—Ç—å": "–í–≤–µ–¥–∏—Ç–µ –¥–µ–ª—å—Ç—É –±–æ–Ω—É—Å–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –º–æ–∂–Ω–æ —Å–æ –∑–Ω–∞–∫–æ–º -/+):",
    }[msg.text]
    await state.set_state(AdminClientsFSM.edit_wait_value)
    await msg.answer(prompt)


@router.message(AdminClientsFSM.edit_wait_value)
async def client_edit_apply(msg: Message, state: FSMContext):
    data = await state.get_data()
    client_id = data.get("client_id")
    field = data.get("edit_field")
    if not client_id or not field:
        await state.clear()
        await show_admin_menu(msg, state, "–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    async with _pool.acquire() as conn:
        if field == "–ò–º—è":
            await conn.execute(
                "UPDATE clients SET full_name=$1, last_updated=NOW() WHERE id=$2",
                (msg.text or "").strip(),
                client_id,
            )
        elif field == "–¢–µ–ª–µ—Ñ–æ–Ω":
            new_phone = normalize_phone_for_db(msg.text)
            if not new_phone or not new_phone.startswith("+7"):
                return await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –ü—Ä–∏–º–µ—Ä: +7XXXXXXXXXX. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
            await conn.execute(
                "UPDATE clients SET phone=$1, last_updated=NOW() WHERE id=$2",
                new_phone,
                client_id,
            )
        elif field == "–î–†":
            b = parse_birthday_str(msg.text)
            if not b:
                return await msg.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –§–æ—Ä–º–∞—Ç—ã: DD.MM.YYYY / YYYY-MM-DD. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
            await conn.execute(
                "UPDATE clients SET birthday=$1, last_updated=NOW() WHERE id=$2",
                b,
                client_id,
            )
        elif field == "–ë–æ–Ω—É—Å—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å":
            try:
                val = int((msg.text or "0").strip())
            except Exception:
                return await msg.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
            await conn.execute(
                "UPDATE clients SET bonus_balance=$1, last_updated=NOW() WHERE id=$2",
                val,
                client_id,
            )
        elif field == "–ë–æ–Ω—É—Å—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–±–∞–≤–∏—Ç—å":
            try:
                delta = int((msg.text or "0").strip())
            except Exception:
                return await msg.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–º–æ–∂–Ω–æ —Å–æ –∑–Ω–∞–∫–æ–º). –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
            rec = await conn.fetchrow(
                "SELECT bonus_balance FROM clients WHERE id=$1",
                client_id,
            )
            current_bonus = int(rec["bonus_balance"] or 0) if rec else 0
            new_bonus = current_bonus + delta
            if new_bonus < 0:
                new_bonus = 0
            await conn.execute(
                "UPDATE clients SET bonus_balance=$1, last_updated=NOW() WHERE id=$2",
                new_bonus,
                client_id,
            )

    await state.clear()
    await show_admin_menu(msg, state, "–ì–æ—Ç–æ–≤–æ. –ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")


@router.message(Command("client_info"))
async def client_info(msg: Message):
    if not await has_permission(msg.from_user.id, "edit_client"):
        return await msg.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        return await msg.answer("–§–æ—Ä–º–∞—Ç: /client_info <—Ç–µ–ª–µ—Ñ–æ–Ω>")
    phone_q = parts[1].strip()
    async with _pool.acquire() as conn:
        rec = await _find_client_by_phone(conn, phone_q)
    if not rec:
        return await msg.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É.")
    return await msg.answer(_fmt_client_row(rec))


@router.message(Command("client_set_name"))
async def client_set_name(msg: Message):
    if not await has_permission(msg.from_user.id, "edit_client"):
        return await msg.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    parts = msg.text.split(maxsplit=2)
    if len(parts) < 3:
        return await msg.answer("–§–æ—Ä–º–∞—Ç: /client_set_name <—Ç–µ–ª–µ—Ñ–æ–Ω> <–Ω–æ–≤–æ–µ_–∏–º—è>")
    phone_q = parts[1].strip()
    new_name = parts[2].strip()
    async with _pool.acquire() as conn:
        rec = await _find_client_by_phone(conn, phone_q)
        if not rec:
            return await msg.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É.")
        await conn.execute("UPDATE clients SET full_name=$1, last_updated=NOW() WHERE id=$2", new_name, rec["id"])
        rec2 = await conn.fetchrow(
            "SELECT id, full_name, phone, birthday, bonus_balance, status FROM clients WHERE id=$1",
            rec["id"],
        )
    return await msg.answer("–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n" + _fmt_client_row(rec2))


@router.message(Command("client_set_birthday"))
async def client_set_birthday(msg: Message):
    if not await has_permission(msg.from_user.id, "edit_client"):
        return await msg.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    try:
        parts = msg.text.split(maxsplit=2)
        if len(parts) < 3:
            return await msg.answer("–§–æ—Ä–º–∞—Ç: /client_set_birthday <—Ç–µ–ª–µ—Ñ–æ–Ω> <–î–†: DD.MM.YYYY –∏–ª–∏ YYYY-MM-DD>")
        phone_q = parts[1].strip()
        bday_raw = parts[2].strip()

        bday_date = parse_birthday_str(bday_raw)
        if not bday_date:
            return await msg.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É. –§–æ—Ä–º–∞—Ç—ã: DD.MM.YYYY (–¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è 1-2 —Ü–∏—Ñ—Ä—ã) –∏–ª–∏ YYYY-MM-DD.")

        async with _pool.acquire() as conn:
            rec = await _find_client_by_phone(conn, phone_q)
            if not rec:
                norm = normalize_phone_for_db(phone_q)
                digits = re.sub(r"[^0-9]", "", norm or phone_q)
                return await msg.answer(
                    f"–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É.\n–ò—Å–∫–∞–ª–∏: {phone_q}\n–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {norm}\n–¶–∏—Ñ—Ä—ã: {digits}"
                )

            await conn.execute(
                "UPDATE clients SET birthday=$1, last_updated=NOW() WHERE id=$2",
                bday_date, rec["id"],
            )
            rec2 = await conn.fetchrow(
                "SELECT id, full_name, phone, birthday, bonus_balance, status FROM clients WHERE id=$1",
                rec["id"],
            )

        return await msg.answer("–î–† –æ–±–Ω–æ–≤–ª—ë–Ω:\n" + _fmt_client_row(rec2))

    except Exception as exc:  # noqa: BLE001
        logger.exception("client_set_birthday failed")
        return await msg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –î–†: {exc}")


@router.message(Command("client_set_bonus"))
async def client_set_bonus(msg: Message):
    if not await has_permission(msg.from_user.id, "edit_client"):
        return await msg.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    parts = msg.text.split(maxsplit=2)
    if len(parts) < 3:
        return await msg.answer("–§–æ—Ä–º–∞—Ç: /client_set_bonus <—Ç–µ–ª–µ—Ñ–æ–Ω> <—Å—É–º–º–∞_–±–∞–ª–ª–æ–≤>")
    phone_q = parts[1].strip()
    try:
        amount = int(parts[2].strip())
    except Exception:
        return await msg.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
    async with _pool.acquire() as conn:
        rec = await _find_client_by_phone(conn, phone_q)
        if not rec:
            return await msg.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É.")
        await conn.execute(
            "UPDATE clients SET bonus_balance=$1, last_updated=NOW() WHERE id=$2",
            amount,
            rec["id"],
        )
        rec2 = await conn.fetchrow(
            "SELECT id, full_name, phone, birthday, bonus_balance, status FROM clients WHERE id=$1",
            rec["id"],
        )
    return await msg.answer("–ë–æ–Ω—É—Å—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n" + _fmt_client_row(rec2))


@router.message(Command("client_add_bonus"))
async def client_add_bonus(msg: Message):
    if not await has_permission(msg.from_user.id, "edit_client"):
        return await msg.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    parts = msg.text.split(maxsplit=2)
    if len(parts) < 3:
        return await msg.answer("–§–æ—Ä–º–∞—Ç: /client_add_bonus <—Ç–µ–ª–µ—Ñ–æ–Ω> <–¥–µ–ª—å—Ç–∞>")
    phone_q = parts[1].strip()
    try:
        delta = int(parts[2].strip())
    except Exception:
        return await msg.answer("–î–µ–ª—å—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–º–æ–∂–Ω–æ —Å–æ –∑–Ω–∞–∫–æ–º -/+).")
    async with _pool.acquire() as conn:
        rec = await _find_client_by_phone(conn, phone_q)
        if not rec:
            return await msg.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É.")
        new_bonus = int(rec["bonus_balance"] or 0) + delta
        if new_bonus < 0:
            new_bonus = 0
        await conn.execute(
            "UPDATE clients SET bonus_balance=$1, last_updated=NOW() WHERE id=$2",
            new_bonus,
            rec["id"],
        )
        rec2 = await conn.fetchrow(
            "SELECT id, full_name, phone, birthday, bonus_balance, status FROM clients WHERE id=$1",
            rec["id"],
        )
    return await msg.answer("–ë–æ–Ω—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n" + _fmt_client_row(rec2))


@router.message(Command("client_set_phone"))
async def client_set_phone(msg: Message):
    if not await has_permission(msg.from_user.id, "edit_client"):
        return await msg.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    parts = msg.text.split(maxsplit=2)
    if len(parts) < 3:
        return await msg.answer("–§–æ—Ä–º–∞—Ç: /client_set_phone <—Å—Ç–∞—Ä—ã–π_—Ç–µ–ª–µ—Ñ–æ–Ω> <–Ω–æ–≤—ã–π_—Ç–µ–ª–µ—Ñ–æ–Ω>")
    phone_q = parts[1].strip()
    new_phone_raw = parts[2].strip()
    new_phone_norm = normalize_phone_for_db(new_phone_raw)
    if (
        not new_phone_norm
        or not new_phone_norm.startswith("+7")
        or len(re.sub(r"[^0-9]", "", new_phone_norm)) != 11
    ):
        return await msg.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –ü—Ä–∏–º–µ—Ä: +7XXXXXXXXXX")
    async with _pool.acquire() as conn:
        rec = await _find_client_by_phone(conn, phone_q)
        if not rec:
            return await msg.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É.")
        try:
            await conn.execute(
                "UPDATE clients SET phone=$1, last_updated=NOW() WHERE id=$2",
                new_phone_norm,
                rec["id"],
            )
        except asyncpg.exceptions.UniqueViolationError:
            other = await conn.fetchrow(
                "SELECT id, full_name FROM clients WHERE phone_digits = regexp_replace($1,'[^0-9]','','g') AND id <> $2",
                new_phone_norm,
                rec["id"],
            )
            if other:
                return await msg.answer(
                    f"–ù–æ–º–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º id={other['id']} ({other['full_name'] or '‚Äî'})."
                )
            return await msg.answer("–ù–æ–º–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º.")
        rec2 = await conn.fetchrow(
            "SELECT id, full_name, phone, birthday, bonus_balance, status FROM clients WHERE id=$1",
            rec["id"],
        )
    return await msg.answer("–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω:\n" + _fmt_client_row(rec2))


@router.message(F.text)
async def _clients_diag_catch_all(msg: Message, state: FSMContext):
    if not _CLIENTS_DIAG:
        return
    cur = await state.get_state()
    log_clients.warning("CLIENTS ROUTER CATCH: state=%s text=%r from=%s", cur, msg.text, msg.from_user.id)
    await msg.answer(f"üîé [clients-router] state={cur or 'None'} text={msg.text!r}")


# DIAG-NOTE:
# - Key handlers: admin_clients_root, client_find_start, client_edit_start, client_find_got_phone, client_edit_got_phone,
#   client_edit_apply, client_set_* commands.
# - Entry state: AdminClientsFSM.root set via bot forwarders and admin_clients_root.
# - Button mapping: "–ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞" ‚Üí client_find_start (state find_wait_phone), "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞" ‚Üí client_edit_start
#   (state edit_wait_phone); back/–æ—Ç–º–µ–Ω–∞ handlers clear and return to root.
# - Previous silence: admin forwarders –æ—Å—Ç–∞–≤–ª—è–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ "AdminMenuFSM:clients", –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ñ–∏–ª—å—Ç—Ä–∞–º —Ä–æ—É—Ç–µ—Ä–∞;
#   —Ç–µ–ø–µ—Ä—å —Ñ–æ—Ä–≤–∞—Ä–¥—ã –∏ root-—Ö–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞–≤—è—Ç AdminClientsFSM.root. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–∏–¥–µ—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã/—Å–æ—Å—Ç–æ—è–Ω–∏—è.
