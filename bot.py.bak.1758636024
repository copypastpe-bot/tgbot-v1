import asyncio, os, re, logging
from decimal import Decimal, ROUND_DOWN
from datetime import date
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, BotCommand, BotCommandScopeDefault, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import asyncpg

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_DSN = os.getenv("DB_DSN")
if not BOT_TOKEN: raise RuntimeError("BOT_TOKEN is not set")
if not DB_DSN:    raise RuntimeError("DB_DSN is not set")

# env rules
MIN_CASH = Decimal(os.getenv("MIN_CASH", "2500"))
BONUS_RATE = Decimal(os.getenv("BONUS_RATE_PERCENT", "5")) / Decimal(100)
MAX_BONUS_RATE = Decimal(os.getenv("MAX_BONUS_SPEND_RATE_PERCENT", "50")) / Decimal(100)
FUEL_PAY = Decimal(os.getenv("FUEL_PAY", "150"))
MASTER_PER_3000 = Decimal(os.getenv("MASTER_RATE_PER_3000", "1000"))
UPSELL_PER_3000 = Decimal(os.getenv("UPSELL_RATE_PER_3000", "500"))

logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN)
dp = Dispatcher()
pool: asyncpg.Pool | None = None

# ===== helpers =====
def only_digits(s: str) -> str:
    return re.sub(r"[^0-9]", "", s or "")

def normalize_phone_for_db(s: str) -> str:
    d = only_digits(s)
    if len(d) == 10 and d.startswith("9"):
        return "+7" + d
    if len(d) == 11 and d.startswith("8"):
        return "+7" + d[1:]
    if len(d) == 11 and d.startswith("7"):
        return "+" + d
    if d and not s.startswith("+"):
        return "+" + d
    return s

def qround_ruble(x: Decimal) -> Decimal:
    # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑ –¥–æ —Ä—É–±–ª—è
    return x.quantize(Decimal("1."), rounding=ROUND_DOWN)

async def set_commands():
    cmds = [
        BotCommand(command="start", description="–°—Ç–∞—Ä—Ç"),
        BotCommand(command="help",  description="–°–ø—Ä–∞–≤–∫–∞"),
        BotCommand(command="find",  description="–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"),
    ]
    await bot.set_my_commands(cmds, scope=BotCommandScopeDefault())

main_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üßæ –Ø –í–´–ü–û–õ–ù–ò–õ –ó–ê–ö–ê–ó")]],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def on_start(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–æ—Ç.\n–ù–∞–∂–º–∏ ¬´üßæ –Ø –í–´–ü–û–õ–ù–ò–õ –ó–ê–ö–ê–ó¬ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /find +7XXXXXXXXXX", reply_markup=main_kb)

@dp.message(Command("help"))
async def help_cmd(msg: Message):
    await msg.answer(
        "–î–æ—Å—Ç—É–ø–Ω–æ:\n"
        "‚Ä¢ /find +7XXXXXXXXXX ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∞ ¬´üßæ –Ø –í–´–ü–û–õ–ù–ò–õ –ó–ê–ö–ê–ó¬ª ‚Äî –ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ –∑–∞–∫–∞–∑–∞",
        reply_markup=main_kb
    )

# ---- /find ----
@dp.message(Command("find"))
async def find_cmd(msg: Message):
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        return await msg.answer("–§–æ—Ä–º–∞—Ç: /find +7XXXXXXXXXX –∏–ª–∏ 9XXXXXXXXX")
    phone_in = normalize_phone_for_db(parts[1])
    async with pool.acquire() as conn:
        rec = await conn.fetchrow(
            "SELECT full_name, phone, bonus_balance, birthday, status "
            "FROM clients WHERE regexp_replace(phone,'[^0-9]+','','g')=regexp_replace($1,'[^0-9]+','','g')",
            phone_in
        )
    if not rec:
        return await msg.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
    bd = rec["birthday"].isoformat() if rec["birthday"] else "‚Äî"
    await msg.answer(
        f"üë§ {rec['full_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
        f"üìû {rec['phone']}\n"
        f"üí≥ {rec['bonus_balance']}\n"
        f"üéÇ {bd}\n"
        f"üè∑Ô∏è {rec['status'] or '‚Äî'}",
        reply_markup=main_kb
    )

# ===== FSM: –Ø –í–´–ü–û–õ–ù–ò–õ –ó–ê–ö–ê–ó =====
class OrderFSM(StatesGroup):
    phone = State()
    name = State()
    amount = State()
    upsell_flag = State()
    upsell_amount = State()
    bonus_spend = State()
    payment_method = State()
    maybe_bday = State()
    confirm = State()

@dp.message(F.text == "üßæ –Ø –í–´–ü–û–õ–ù–ò–õ –ó–ê–ö–ê–ó")
async def start_order(msg: Message, state: FSMContext):
    await state.clear()
    await state.set_state(OrderFSM.phone)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ (9XXXXXXXXX, 8XXXXXXXXXX –∏–ª–∏ +7XXXXXXXXXX):", reply_markup=ReplyKeyboardRemove())

@dp.message(OrderFSM.phone, F.text)
async def got_phone(msg: Message, state: FSMContext):
    phone_in = normalize_phone_for_db(msg.text.strip())
    async with pool.acquire() as conn:
        client = await conn.fetchrow(
            "SELECT id, full_name, phone, bonus_balance, birthday "
            "FROM clients WHERE regexp_replace(phone,'[^0-9]+','','g')=regexp_replace($1,'[^0-9]+','','g')",
            phone_in
        )
    data = {"phone_in": phone_in}
    if client:
        data["client_id"] = client["id"]
        data["client_name"] = client["full_name"]
        data["bonus_balance"] = int(client["bonus_balance"] or 0)
        data["birthday"] = client["birthday"]
        await state.update_data(**data)
        await state.set_state(OrderFSM.amount)
        return await msg.answer(f"–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {client['full_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n–ë–æ–Ω—É—Å–æ–≤: {data['bonus_balance']}\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞ (—Ä—É–±):")
    else:
        data["client_id"] = None
        data["bonus_balance"] = 0
        await state.update_data(**data)
        await state.set_state(OrderFSM.name)
        return await msg.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")

def parse_money(s: str) -> Decimal | None:
    s = s.replace(",", ".").strip()
    try:
        v = Decimal(s)
        if v < 0: return None
        return v.quantize(Decimal("0.01"), rounding=ROUND_DOWN)
    except Exception:
        return None

@dp.message(OrderFSM.name, F.text)
async def got_name(msg: Message, state: FSMContext):
    await state.update_data(client_name=msg.text.strip())
    await state.set_state(OrderFSM.amount)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞ (—Ä—É–±):")

@dp.message(OrderFSM.amount, F.text)
async def got_amount(msg: Message, state: FSMContext):
    amount = parse_money(msg.text)
    if amount is None:
        return await msg.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ ‚â• 0. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞ –µ—â—ë —Ä–∞–∑:")
    await state.update_data(amount_total=amount)
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]], resize_keyboard=True)
    await state.set_state(OrderFSM.upsell_flag)
    await msg.answer("–ë—ã–ª–∞ –¥–æ–ø. –ø—Ä–æ–¥–∞–∂–∞? (–î–∞/–ù–µ—Ç)", reply_markup=kb)

@dp.message(OrderFSM.upsell_flag, F.text.lower().in_(["–¥–∞","–Ω–µ—Ç"]))
async def got_upsell_flag(msg: Message, state: FSMContext):
    if msg.text.lower() == "–¥–∞":
        await state.set_state(OrderFSM.upsell_amount)
        return await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ø. –ø—Ä–æ–¥–∞–∂–∏ (—Ä—É–±):", reply_markup=ReplyKeyboardRemove())
    else:
        await state.update_data(upsell_amount=Decimal("0"))
        return await ask_bonus(msg, state)

@dp.message(OrderFSM.upsell_amount, F.text)
async def got_upsell_amount(msg: Message, state: FSMContext):
    v = parse_money(msg.text)
    if v is None:
        return await msg.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ ‚â• 0. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ø. –ø—Ä–æ–¥–∞–∂–∏ –µ—â—ë —Ä–∞–∑:")
    await state.update_data(upsell_amount=v)
    return await ask_bonus(msg, state)

async def ask_bonus(msg: Message, state: FSMContext):
    data = await state.get_data()
    amount = Decimal(str(data["amount_total"]))
    balance = Decimal(str(data.get("bonus_balance", 0)))

    # —Å—á–∏—Ç–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    max_by_rate = (amount * MAX_BONUS_RATE).quantize(Decimal("1"), rounding=ROUND_DOWN)
    max_by_min_cash = (amount - MIN_CASH).quantize(Decimal("1"), rounding=ROUND_DOWN)
    bonus_max = max(Decimal("0"), min(max_by_rate, balance, max_by_min_cash))

    # === –ï—Å–ª–∏ –±–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç –∫ —Å–ø–∏—Å–∞–Ω–∏—é ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ ===
    if balance <= 0 or bonus_max <= 0:
        await state.update_data(bonus_max=Decimal("0"), bonus_spent=Decimal("0"), amount_cash=amount)
        await state.set_state(OrderFSM.payment_method)
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–Ω–∞–ª"), KeyboardButton(text="–∫–∞—Ä—Ç–∞"), KeyboardButton(text="–ø–µ—Ä–µ–≤–æ–¥")]],
            resize_keyboard=True
        )
        return await msg.answer(
            "–ë–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ.\n"
            f"–û–ø–ª–∞—Ç–∞ –¥–µ–Ω—å–≥–∞–º–∏: {amount}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=kb
        )

    # –∏–Ω–∞—á–µ ‚Äî –∑–∞–¥–∞—ë–º –≤—ã–±–æ—Ä —Å–ø–∏—Å–∞–Ω–∏—è
    await state.update_data(bonus_max=bonus_max)
    await state.set_state(OrderFSM.bonus_spend)
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–°–ø–∏—Å–∞—Ç—å 0"), KeyboardButton(text="–°–ø–∏—Å–∞—Ç—å 50%"), KeyboardButton(text="–°–ø–∏—Å–∞—Ç—å MAX")],
        [KeyboardButton(text="–î—Ä—É–≥–∞—è —Å—É–º–º–∞")]
    ], resize_keyboard=True)
    return await msg.answer(f"–ú–æ–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å –¥–æ {bonus_max} –±–æ–Ω—É—Å–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)

@dp.message(OrderFSM.bonus_spend, F.text)
async def got_bonus_spend(msg: Message, state: FSMContext):
    data = await state.get_data()
    amount = Decimal(str(data["amount_total"]))
    bonus_max = Decimal(str(data["bonus_max"]))
    choice = msg.text.lower()
    if "50%" in choice:
        spend = (amount * Decimal("0.5")).quantize(Decimal("1"), rounding=ROUND_DOWN)
    elif "max" in choice:
        spend = bonus_max
    elif "0" in choice:
        spend = Decimal("0")
    else:
        v = re.sub(r"[^\d]", "", msg.text)
        if not v:
            return await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—É—é —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤ (—Ä—É–±), –Ω–∞–ø—Ä–∏–º–µ—Ä: 300")
        spend = Decimal(v)
    if spend > bonus_max:
        return await msg.answer(f"–ù–µ–ª—å–∑—è —Å–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à–µ {bonus_max}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â—É—é –ª–∏–º–∏—Ç.")
    cash_payment = amount - spend
    if cash_payment < MIN_CASH:
        return await msg.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –¥–µ–Ω—å–≥–∞–º–∏ {MIN_CASH}. –£–º–µ–Ω—å—à–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤.")
    await state.update_data(bonus_spent=spend, amount_cash=cash_payment)
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–Ω–∞–ª"), KeyboardButton(text="–∫–∞—Ä—Ç–∞"), KeyboardButton(text="–ø–µ—Ä–µ–≤–æ–¥")]], resize_keyboard=True)
    await state.set_state(OrderFSM.payment_method)
    await msg.answer(f"–û–ø–ª–∞—Ç–∞ –¥–µ–Ω—å–≥–∞–º–∏: {cash_payment}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

@dp.message(OrderFSM.payment_method, F.text.lower().in_(["–Ω–∞–ª","–∫–∞—Ä—Ç–∞","–ø–µ—Ä–µ–≤–æ–¥"]))
async def got_method(msg: Message, state: FSMContext):
    await state.update_data(payment_method=msg.text.lower())
    data = await state.get_data()
    if data.get("birthday"):
        await state.set_state(OrderFSM.confirm)
        return await show_confirm(msg, state)
    else:
        await state.set_state(OrderFSM.maybe_bday)
        return await msg.answer("–ï—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ –î–† –∫–ª–∏–µ–Ω—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="-")]], resize_keyboard=True))

@dp.message(OrderFSM.maybe_bday, F.text)
async def got_bday(msg: Message, state: FSMContext):
    val = msg.text.strip()
    if val != "-" and not re.fullmatch(r"\d{2}\.\d{2}", val):
        return await msg.answer("–§–æ—Ä–º–∞—Ç –î–†: –î–î.MM (–Ω–∞–ø—Ä–∏–º–µ—Ä 05.11) –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    if val != "-":
        d, m = map(int, val.split("."))
        await state.update_data(new_birthday=date(2000, m, d))
    await state.set_state(OrderFSM.confirm)
    return await show_confirm(msg, state)

async def show_confirm(msg: Message, state: FSMContext):
    data = await state.get_data()
    amount = Decimal(str(data["amount_total"]))
    upsell = Decimal(str(data.get("upsell_amount", 0)))
    bonus_spent = Decimal(str(data.get("bonus_spent", 0)))
    cash_payment = Decimal(str(data["amount_cash"]))
    bonus_earned = qround_ruble(cash_payment * BONUS_RATE)
    base_pay = qround_ruble(cash_payment * (MASTER_PER_3000 / Decimal(3000)))
    if base_pay < Decimal("1000"):
        base_pay = Decimal("1000")
    upsell_pay = qround_ruble(upsell * (UPSELL_PER_3000 / Decimal(3000)))
    total_pay = base_pay + FUEL_PAY + upsell_pay
    await state.update_data(bonus_earned=int(bonus_earned), base_pay=base_pay, upsell_pay=upsell_pay, fuel_pay=FUEL_PAY, total_pay=total_pay)
    name = data.get("client_name") or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    bday_text = data.get("birthday") or data.get("new_birthday") or "‚Äî"
    text = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
        f"üë§ {name}\n"
        f"üìû {data['phone_in']}\n"
        f"üíà –ß–µ–∫: {amount} (–¥–æ–ø: {upsell})\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞ –¥–µ–Ω—å–≥–∞–º–∏: {cash_payment}\n"
        f"üéÅ –°–ø–∏—Å–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus_spent}\n"
        f"‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å–æ–≤: {int(bonus_earned)}\n"
        f"üéÇ –î–†: {bday_text}\n"
        f"üë∑ –ó–ü –º–∞—Å—Ç–µ—Ä–∞: {total_pay} (–±–∞–∑–∞ {base_pay} + –±–µ–Ω–∑–∏–Ω {FUEL_PAY} + –¥–æ–ø {upsell_pay})\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'"
    )
    await msg.answer(text, reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],[KeyboardButton(text="–æ—Ç–º–µ–Ω–∞")]], resize_keyboard=True))

@dp.message(OrderFSM.confirm, F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_order(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_kb)

@dp.message(OrderFSM.confirm, F.text.lower() == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def commit_order(msg: Message, state: FSMContext):
    data = await state.get_data()
    phone_in = data["phone_in"]
    amount = Decimal(str(data["amount_total"]))
    upsell = Decimal(str(data.get("upsell_amount", 0)))
    bonus_spent = int(Decimal(str(data.get("bonus_spent", 0))))
    cash_payment = Decimal(str(data["amount_cash"]))
    bonus_earned = int(Decimal(str(data["bonus_earned"])))
    base_pay = Decimal(str(data["base_pay"]))
    upsell_pay = Decimal(str(data["upsell_pay"]))
    fuel_pay = Decimal(str(data["fuel_pay"]))
    total_pay = Decimal(str(data["total_pay"]))
    name = data.get("client_name")
    new_bday = data.get("new_birthday")  # date|None

    async with pool.acquire() as conn:
        async with conn.transaction():
            client = await conn.fetchrow(
                "INSERT INTO clients (full_name, phone, bonus_balance, birthday, status) "
                "VALUES ($1, $2, 0, $3, 'client') "
                "ON CONFLICT (phone) DO UPDATE SET "
                "  full_name = COALESCE(EXCLUDED.full_name, clients.full_name), "
                "  birthday  = COALESCE(EXCLUDED.birthday, clients.birthday), "
                "  status='client' "
                "RETURNING id, bonus_balance",
                name, phone_in, new_bday
            )
            client_id = client["id"]

            order = await conn.fetchrow(
                "INSERT INTO orders (client_id, master_id, phone_digits, amount_total, amount_cash, amount_upsell, "
                " bonus_spent, bonus_earned, payment_method) "
                "VALUES ($1, "
                "       (SELECT id FROM staff WHERE tg_user_id=$2 AND is_active LIMIT 1), "
                "       regexp_replace($3,'[^0-9]+','','g'), $4, $5, $6, $7, $8, $9) "
                "RETURNING id",
                client_id, msg.from_user.id, phone_in, str(amount), str(cash_payment), str(upsell),
                bonus_spent, bonus_earned, data["payment_method"]
            )
            order_id = order["id"]

            await conn.execute(
                "INSERT INTO staff(tg_user_id, role, is_active) "
                "VALUES ($1,'master',true) ON CONFLICT (tg_user_id) DO NOTHING",
                msg.from_user.id
            )

            if bonus_spent > 0:
                await conn.execute(
                    "INSERT INTO bonus_transactions (client_id, delta, reason, order_id) VALUES ($1, $2, 'spend', $3)",
                    client_id, -bonus_spent, order_id
                )
            if bonus_earned > 0:
                await conn.execute(
                    "INSERT INTO bonus_transactions (client_id, delta, reason, order_id) VALUES ($1, $2, 'accrual', $3)",
                    client_id, bonus_earned, order_id
                )

            await conn.execute(
                "UPDATE clients SET bonus_balance = GREATEST(0, bonus_balance - $1 + $2) WHERE id=$3",
                bonus_spent, bonus_earned, client_id
            )

            await conn.execute(
                "INSERT INTO cashbook_entries (kind, method, amount, comment, order_id) "
                "VALUES ('income', $1, $2, '–û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑', $3)",
                data["payment_method"], str(cash_payment), order_id
            )

            await conn.execute(
                "INSERT INTO payroll_items (order_id, master_id, base_pay, fuel_pay, upsell_pay, total_pay, calc_info) "
                "VALUES ($1, (SELECT id FROM staff WHERE tg_user_id=$2), $3, $4, $5, $6, "
                "        jsonb_build_object('cash_payment',$7,'rules','1000/3000 + 150 + 500/3000'))",
                order_id, msg.from_user.id, str(base_pay), str(fuel_pay), str(upsell_pay), str(total_pay), str(cash_payment)
            )

    await state.clear()
    await msg.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–°–ø–∞—Å–∏–±–æ!", reply_markup=main_kb)

# fallback
@dp.message(F.text)
async def unknown(msg: Message):
    await msg.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ù–∞–∂–º–∏ ¬´üßæ –Ø –í–´–ü–û–õ–ù–ò–õ –ó–ê–ö–ê–ó¬ª –∏–ª–∏ /help", reply_markup=main_kb)

async def main():
    global pool
    pool = await asyncpg.create_pool(dsn=DB_DSN, min_size=1, max_size=5)
    await set_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

def _is_confirm(text: str) -> bool:
    return text and text.strip().casefold() in {"–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", "ok", "–¥–∞"}

@dp.message(OrderFSM.confirm, F.text.func(_is_confirm))
async def confirm_order(msg: Message, state: FSMContext):
    data = await state.get_data()
    try:
        ok = await commit_order(msg, data)
        if ok:
            await msg.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        else:
            await msg.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (ok=False).")
    except Exception as e:
        await msg.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑: {type(e).__name__}: {e}")
    finally:
        await state.clear()

# fallback: –ø–æ–∫–∞–∂–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–∏—à–ª–æ –≤ confirm
@dp.message(OrderFSM.confirm)
async def confirm_fallback(msg: Message, state: FSMContext):
    await msg.answer("–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –Ω–∞–ø–∏—à–∏: ¬´–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª (–∏–ª–∏ ok/–¥–∞).")
